// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package queries

import (
	"context"
	"time"
)

const createPlugin = `-- name: CreatePlugin :one
INSERT INTO plugins (
    name, path, hash, version
) VALUES ( ?, ?, ?, ? ) 
RETURNING id, name, path, hash, version, created_at, updated_at
`

type CreatePluginParams struct {
	Name    string
	Path    string
	Hash    string
	Version string
}

func (q *Queries) CreatePlugin(ctx context.Context, arg CreatePluginParams) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, createPlugin,
		arg.Name,
		arg.Path,
		arg.Hash,
		arg.Version,
	)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Hash,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlugin = `-- name: DeletePlugin :exec
DELETE FROM plugins
WHERE id = ?
`

func (q *Queries) DeletePlugin(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlugin, id)
	return err
}

const getPlugin = `-- name: GetPlugin :one
SELECT id, name, path, hash, version, created_at, updated_at FROM plugins
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlugin(ctx context.Context, id int64) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, getPlugin, id)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Hash,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlugins = `-- name: ListPlugins :many
SELECT id, name, path, hash, version, created_at, updated_at FROM plugins
ORDER BY name
`

func (q *Queries) ListPlugins(ctx context.Context) ([]Plugin, error) {
	rows, err := q.db.QueryContext(ctx, listPlugins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plugin
	for rows.Next() {
		var i Plugin
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Hash,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlugin = `-- name: UpdatePlugin :one
UPDATE plugins
SET name = ?, path = ?, hash = ?, updated_at = ?
WHERE id = ?
RETURNING id, name, path, hash, version, created_at, updated_at
`

type UpdatePluginParams struct {
	Name      string
	Path      string
	Hash      string
	UpdatedAt time.Time
	ID        int64
}

func (q *Queries) UpdatePlugin(ctx context.Context, arg UpdatePluginParams) (Plugin, error) {
	row := q.db.QueryRowContext(ctx, updatePlugin,
		arg.Name,
		arg.Path,
		arg.Hash,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Plugin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Hash,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
